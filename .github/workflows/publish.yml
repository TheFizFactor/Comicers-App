name: Publish
permissions:
  contents: read
  pull-requests: write
on:
  push:
    branches:
      - main
jobs:
  publish-win:
    strategy:
      matrix:
        node: ['22']
        os: [windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.0.0
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'
      # Add Visual Studio setup specifically for native module builds
      - name: Setup Visual Studio
        uses: microsoft/setup-msbuild@v1.1
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Python dependencies
        run: pip install setuptools
          
      # Cache electron binaries to speed up builds
      - name: Cache Electron
        uses: actions/cache@v3
        with:
          path: |
            ${{ runner.temp }}\electron\Cache
            ${{ runner.temp }}\electron-builder\Cache
          key: ${{ runner.os }}-electron-cache-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-electron-cache-
      
      # Configure npm registry options
      - name: Configure npm registry
        run: |
          npm config set registry http://registry.npmjs.org/
          npm config set strict-ssl false
      
      # Install dependencies using pnpm --ignore-scripts to avoid native module compilation initially
      - name: Install dependencies
        run: |
          pnpm i --no-frozen-lockfile --fetch-timeout 600000 --ignore-scripts
          cd apps/desktop && pnpm add cross-env --save-dev
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
      
      # Create a modified package.json with fixed dependencies
      - name: Fix workspace dependencies
        shell: pwsh
        run: |
          # Create minimal package.json for native module installation
          cd apps/desktop
          $packageJson = Get-Content -Raw -Path package.json | ConvertFrom-Json
          
          # Create a temporary package.json without workspace references for npm install
          $tempPackage = @{
            name = $packageJson.name
            dependencies = @{}
          }
          
          # Convert to JSON and save
          $tempPackage | ConvertTo-Json -Depth 10 > temp-package.json
      
      # Install problematic modules with npm directly
      - name: Install native modules
        run: |
          cd apps/desktop
          npm install --save-optional bufferutil@4.0.9
          npm install --save-optional utf-8-validate@6.0.5
          npm install --save-optional register-scheme@0.0.2
        env:
          npm_config_build_from_source: false
      
      # Patch electron-builder to skip native module rebuilds
      - name: Patch electron-builder config
        shell: pwsh
        run: |
          # Create or update .electronbuildrc in the desktop folder
          cd apps/desktop
          @"
          {
            "electronVersion": "22.3.3",
            "npmRebuild": false,
            "buildDependenciesFromSource": false
          }
          "@ | Out-File -FilePath .electronbuildrc -Encoding utf8
      
      # Build the app
      - name: Build app
        run: pnpm build
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
      
      # Package with modified environment variables to avoid native rebuilds
      - name: Package Windows app
        run: |
          cd apps/desktop && cross-env ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES=1 pnpm dist:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: "--max_old_space_size=4096"
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          npm_config_build_from_source: false
          ELECTRON_BUILDER_SKIP_REBUILD: true
          
  publish-linux:
    strategy:
      matrix:
        node: ['22']
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.0.0
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'
      - name: Cache Electron
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
          key: ${{ runner.os }}-electron-cache-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-electron-cache-
      - name: Create pnpm store directory
        run: mkdir -p $(pnpm store path)
      - name: Clean pnpm store
        run: pnpm store prune || true
      - name: Install dependencies
        run: pnpm i --no-frozen-lockfile --fetch-timeout 600000
      - name: Build and package Linux app
        run: pnpm dist:linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: "--max_old_space_size=4096"
  publish-mac:
    strategy:
      matrix:
        node: ['22']
        os: [macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.0.0
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Python dependencies
        run: pip install setuptools
      - name: Cache Electron
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Caches/electron
            ~/Library/Caches/electron-builder
          key: ${{ runner.os }}-electron-cache-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-electron-cache-
      - name: Create pnpm store directory
        run: mkdir -p $(pnpm store path)
      - name: Clean pnpm store
        run: pnpm store prune || true
      - name: Install dependencies
        run: pnpm i --no-frozen-lockfile --fetch-timeout 600000
      - name: Build and package macOS app
        run: pnpm dist:mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: "--max_old_space_size=4096"
          # APPLE_ID: ${{ secrets.APPLE_ID }}
          # APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          # CSC_LINK: ${{ secrets.CSC_LINK }}
          # CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
  publish-docs:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
    steps:
      - uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.0.0
      - uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm i --no-frozen-lockfile
      - name: Install docs dependencies
        run: cd apps/docs && pnpm i
      - name: Build docs
        run: cd apps/docs && pnpm build
      - name: Create CNAME file in dist directory
        run: echo "comicers.org" > apps/docs/src/.vitepress/dist/CNAME
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./apps/docs/src/.vitepress/dist
          force_orphan: true # This creates a clean gh-pages branch without history
