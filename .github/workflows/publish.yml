name: Publish
permissions:
  contents: read
  pull-requests: write
on:
  push:
    branches:
      - main
jobs:
  publish-win:
    strategy:
      matrix:
        node: ['22']
        os: [windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.0.0
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'
      # Add Visual Studio setup specifically for native module builds
      - name: Setup Visual Studio
        uses: microsoft/setup-msbuild@v1.1
      # Create build directories
      - name: Set up build environment
        shell: pwsh
        run: |
          $buildDir = Join-Path $env:RUNNER_TEMP "build_logs"
          New-Item -Path $buildDir -ItemType Directory -Force
          
          # Set environment variables for node-gyp and native module builds
          echo "CL=/MP" >> $env:GITHUB_ENV
          echo "TrackFileAccess=false" >> $env:GITHUB_ENV
          echo "UseMultiToolTask=true" >> $env:GITHUB_ENV
          echo "EnforceProcessCountAcrossBuilds=true" >> $env:GITHUB_ENV
          echo "VCTargetsPath=C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\MSBuild\\Microsoft\\VC\\v170" >> $env:GITHUB_ENV
          
          # Set node-gyp specific environment variables
          echo "GYP_MSVS_VERSION=2022" >> $env:GITHUB_ENV
          echo "npm_config_msvs_version=2022" >> $env:GITHUB_ENV
          echo "npm_config_nodedir=${{ env.NODE_VERSION }}" >> $env:GITHUB_ENV
          echo "npm_config_target_arch=x64" >> $env:GITHUB_ENV
          echo "npm_config_platform=win32" >> $env:GITHUB_ENV
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Python dependencies
        run: pip install setuptools
      # Cache electron binaries to speed up builds
      - name: Cache Electron
        uses: actions/cache@v3
        with:
          path: |
            ${{ runner.temp }}\electron\Cache
            ${{ runner.temp }}\electron-builder\Cache
          key: ${{ runner.os }}-electron-cache-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-electron-cache-
      # Modify npmrc for Windows build with correct config format
      - name: Configure npm registry for Windows
        run: |
          npm config set registry http://registry.npmjs.org/
          npm config set strict-ssl false
          
          # Create .npmrc file in project root to configure native module compilation
          echo "msvs_version=2022" > .npmrc
          echo "python=python3" >> .npmrc
          echo "nodedir=${{ env.NODE_VERSION }}" >> .npmrc
          echo "target_arch=x64" >> .npmrc
          echo "build_from_source=false" >> .npmrc
      - name: Create pnpm store directory
        shell: pwsh
        run: New-Item -Path ".pnpm-store\v3" -ItemType Directory -Force
      - name: Clean pnpm store
        run: pnpm store prune || true
      # Install cross-env package globally to help with environment variables
      - name: Install global dependencies
        run: npm install -g cross-env
      # Use --ignore-scripts to avoid native module compilation during initial install
      - name: Install dependencies 
        run: |
          pnpm i --no-frozen-lockfile --fetch-timeout 600000 --ignore-scripts
          cd apps/desktop && pnpm add cross-env --save-dev
      # Create tracking folder for native module build
      - name: Create tracking folder
        shell: pwsh
        run: New-Item -Path "${{ runner.temp }}\tracker" -ItemType Directory -Force
      # Build and package - using environment variables for MSBuild/VC++
      - name: Build app
        run: pnpm build
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          GYP_MSVS_VERSION: 2022
          npm_config_msvs_version: 2022
          npm_config_build_from_source: false
      # Set GYP environment variables for native module build
      - name: Package Windows app
        run: |
          cd apps/desktop && cross-env ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES=1 pnpm dist:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: "--max_old_space_size=4096"
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          npm_config_build_from_source: false
          npm_config_msvs_version: 2022
          GYP_MSVS_VERSION: 2022
          
  publish-linux:
    strategy:
      matrix:
        node: ['22']
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.0.0
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'
      - name: Cache Electron
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
          key: ${{ runner.os }}-electron-cache-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-electron-cache-
      - name: Create pnpm store directory
        run: mkdir -p $(pnpm store path)
      - name: Clean pnpm store
        run: pnpm store prune || true
      - name: Install dependencies
        run: pnpm i --no-frozen-lockfile --fetch-timeout 600000
      - name: Build and package Linux app
        run: pnpm dist:linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: "--max_old_space_size=4096"
  publish-mac:
    strategy:
      matrix:
        node: ['22']
        os: [macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.0.0
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Python dependencies
        run: pip install setuptools
      - name: Cache Electron
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Caches/electron
            ~/Library/Caches/electron-builder
          key: ${{ runner.os }}-electron-cache-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-electron-cache-
      - name: Create pnpm store directory
        run: mkdir -p $(pnpm store path)
      - name: Clean pnpm store
        run: pnpm store prune || true
      - name: Install dependencies
        run: pnpm i --no-frozen-lockfile --fetch-timeout 600000
      - name: Build and package macOS app
        run: pnpm dist:mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: "--max_old_space_size=4096"
          # APPLE_ID: ${{ secrets.APPLE_ID }}
          # APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          # CSC_LINK: ${{ secrets.CSC_LINK }}
          # CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
  publish-docs:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
    steps:
      - uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.0.0
      - uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm i --no-frozen-lockfile
      - name: Install docs dependencies
        run: cd apps/docs && pnpm i
      - name: Build docs
        run: cd apps/docs && pnpm build
      - name: Create CNAME file in dist directory
        run: echo "comicers.org" > apps/docs/src/.vitepress/dist/CNAME
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./apps/docs/src/.vitepress/dist
          force_orphan: true # This creates a clean gh-pages branch without history
